{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vmsep\\\\Desktop\\\\openweather-react-main\\\\src\\\\components\\\\WeatherPanel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Form from './Form';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherPanel = () => {\n  _s();\n\n  let urlWeather = \"https://api.openweathermap.org/data/2.5/weather?appid=079fae9831c9aea9535a5467f47e1a46&lang=es\";\n  let cityUrl = \"&q=\";\n  let urlForecast = \"https://api.openweathermap.org/data/2.5/forecast?appid=079fae9831c9aea9535a5467f47e1a46&lang=es\";\n  const [weather, setWeather] = useState([]);\n  const [forecast, setForecast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [show, setShow] = useState(false);\n  const [location, setLocation] = useState(\"\");\n\n  const getLocation = async loc => {\n    setLoading(true);\n    setLocation(loc); //weather\n\n    urlWeather = urlWeather + cityUrl + loc;\n    await fetch(urlWeather).then(response => {\n      if (!response.ok) throw {\n        response\n      };\n      return response.json();\n    }).then(weatherData => {\n      console.log(weatherData);\n      setWeather(weatherData);\n    }).catch(error => {\n      console.log(error);\n      setLoading(false);\n      setShow(false);\n    }); //Forecast\n\n    urlForecast = urlForecast + cityUrl + loc;\n    await fetch(urlForecast).then(response => {\n      if (!response.ok) throw {\n        response\n      };\n      return response.json();\n    }).then(forecastData => {\n      console.log(forecastData);\n      setForecast(forecastData);\n      setLoading(false);\n      setShow(true);\n    }).catch(error => {\n      console.log(error);\n      setLoading(false);\n      setShow(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      newLocation: getLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      showData: show,\n      loadingData: loading,\n      weather: weather,\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WeatherPanel, \"DmLMNDQIvEa8cHX36yZIRFSepWA=\");\n\n_c = WeatherPanel;\nexport default WeatherPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherPanel\");","map":{"version":3,"sources":["C:/Users/vmsep/Desktop/openweather-react-main/src/components/WeatherPanel.js"],"names":["React","useState","Form","Card","WeatherPanel","urlWeather","cityUrl","urlForecast","weather","setWeather","forecast","setForecast","loading","setLoading","show","setShow","location","setLocation","getLocation","loc","fetch","then","response","ok","json","weatherData","console","log","catch","error","forecastData"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport Form from './Form';\nimport Card from './Card';\n\nconst WeatherPanel = () => {\n\n    let urlWeather = \"https://api.openweathermap.org/data/2.5/weather?appid=079fae9831c9aea9535a5467f47e1a46&lang=es\";\n    let cityUrl = \"&q=\";\n\n    let urlForecast = \"https://api.openweathermap.org/data/2.5/forecast?appid=079fae9831c9aea9535a5467f47e1a46&lang=es\"\n\n    const [weather, setWeather] = useState([]);\n    const [forecast, setForecast] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [show, setShow] = useState(false);\n    const [location, setLocation] = useState(\"\");\n\n    const getLocation = async(loc) => {\n        setLoading(true);\n        setLocation(loc);\n\n        //weather\n\n        urlWeather = urlWeather + cityUrl + loc;\n\n        await fetch(urlWeather).then((response) =>{\n            if(!response.ok) throw {response}\n            return response.json();\n        }).then((weatherData) =>{\n            console.log(weatherData);\n            setWeather(weatherData);\n        }).catch(error =>{\n            console.log(error);\n            setLoading(false);\n            setShow(false);\n        });\n\n        //Forecast\n\n        urlForecast = urlForecast + cityUrl + loc;\n\n        await fetch(urlForecast).then((response) =>{\n            if(!response.ok) throw {response}\n            return response.json();\n        }).then((forecastData) =>{\n            console.log(forecastData);\n            setForecast(forecastData);\n\n            setLoading(false);\n            setShow(true);\n\n        }).catch(error =>{\n            console.log(error);\n            setLoading(false);\n            setShow(false);\n        });\n\n        \n    }\n\n\n    return(\n\n        <React.Fragment>\n    \n            <Form\n                newLocation = {getLocation}\n            />\n\n            <Card\n                showData = {show}\n                loadingData = {loading}\n                weather = {weather}\n                forecast = {forecast}\n            />\n\n\n        </React.Fragment>\n\n    );\n\n}\n\nexport default WeatherPanel;\n"]},"metadata":{},"sourceType":"module"}